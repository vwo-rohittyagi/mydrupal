<?php

namespace Drupal\vwo;

use Drupal\Core\Cache\Cache;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Path\PathMatcherInterface;
use Drupal\Core\Path\CurrentPathStack;
use Drupal\path_alias\AliasManagerInterface;
use Drupal\user\UserDataInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Service class for VWO integration.
 */
class VwoService {

    /**
     * The configuration factory.
     *
     * @var \Drupal\Core\Config\ConfigFactoryInterface
     */
    protected $configFactory;

    /**
     * The current user.
     *
     * @var \Drupal\Core\Session\AccountInterface
     */
    protected $currentUser;

    /**
     * The path matcher.
     *
     * @var \Drupal\Core\Path\PathMatcherInterface
     */
    protected $pathMatcher;

    /**
     * The current path.
     *
     * @var \Drupal\Core\Path\CurrentPathStack
     */
    protected $currentPath;

    /**
     * The alias manager.
     *
     * @var \Drupal\path_alias\AliasManagerInterface
     */
    protected $aliasManager;

    /**
     * The user data service.
     *
     * @var \Drupal\user\UserDataInterface
     */
    protected $userData;

    /**
     * Constructs the VwoService object.
     *
     * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
     *   The configuration factory.
     * @param \Drupal\Core\Session\AccountInterface $currentUser
     *   The current user.
     * @param \Drupal\Core\Path\PathMatcherInterface $pathMatcher
     *   The path matcher.
     * @param \Drupal\Core\Path\CurrentPathStack $currentPath
     *   The current path.
     * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
     *   The alias manager.
     * @param \Drupal\user\UserDataInterface $userData
     *   The user data service.
     */
    public function __construct(
        ConfigFactoryInterface $configFactory,
        AccountInterface $currentUser,
        PathMatcherInterface $pathMatcher,
        CurrentPathStack $currentPath,
        AliasManagerInterface $aliasManager,
        UserDataInterface $userData
    ) {
        $this->configFactory = $configFactory;
        $this->currentUser = $currentUser;
        $this->pathMatcher = $pathMatcher;
        $this->currentPath = $currentPath;
        $this->aliasManager = $aliasManager;
        $this->userData = $userData;
    }

    /**
     * Creates the service instance.
     *
     * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
     *   The container.
     *
     * @return static
     *   Returns an instance of this service.
     */
    public static function create(ContainerInterface $container) {
        return new static(
            $container->get('config.factory'),
            $container->get('current_user'),
            $container->get('path.matcher'),
            $container->get('path.current'),
            $container->get('path_alias.manager'),
            $container->get('user.data')
        );
    }

    /**
     * Adds VWO script attachments to the page.
     *
     * @param array $attachments
     *   The attachments array.
     */
    public function addAttachments(array &$attachments) {
        $state = &drupal_static('vwo_state', [
            'add' => FALSE,
            'added' => FALSE,
            'custom_url' => FALSE,
            'cache_contexts' => [],
        ]);

        if ($state['added']) {
            return;
        }

        $config = $this->configFactory->get('vwo.settings');
        $id = $config->get('id');

        if ($id == NULL) {
            return;
        }

        $filter = ($config->get('filter.enabled') == 'on');
        if (!$filter && !$state['add']) {
            return;
        }

        if ($filter) {
            $state['add'] = TRUE;

            $account = $this->currentUser;

            $usercontrol = $config->get('filter.userconfig');
            if ($usercontrol != 'nocontrol' && $account->isAuthenticated()) {
                $addjs = ($usercontrol == 'optin') ? FALSE : TRUE;

                $userconfig = $this->userData->get('vwo', $account->id(), 'userconfig');
                if (isset($userconfig)) {
                    $addjs = $userconfig;
                }

                $state['add'] = $addjs;
                $state['cache_contexts'][] = 'user';
            }

            if ($state['add'] && $include_node_types = $config->get('filter.nodetypes')) {
                $node = \Drupal::routeMatch()->getParameter('node');

                if ($node) {
                    $state['add'] = in_array($node->getType(), $include_node_types);
                    $state['cache_contexts'][] = 'url.path';
                } else {
                    $state['add'] = FALSE;
                }
            }

            if ($state['add'] && $include_roles = $config->get('filter.roles')) {
                $intersect = array_intersect($include_roles, $account->getRoles());
                $state['add'] = ($intersect) ? TRUE : FALSE;
                $state['cache_contexts'][] = 'user.roles';
            }

            if ($state['add'] && $pathlist = $config->get('filter.page.list')) {
                $filter_type = $config->get('filter.page.type');

                if ($filter_type == 'usephp') {
                    if (\Drupal::moduleHandler()->moduleExists('php')) {
                        if (php_eval($pathlist)) {
                            $state['add'] = TRUE;
                        } else {
                            $state['add'] = FALSE;
                        }
                    }
                } else {
                    $current_path = $this->currentPath->getPath();
                    $matched = $this->pathMatcher->matchPath($current_path, $pathlist);

                    if (!$matched) {
                        $alias = $this->aliasManager->getAliasByPath($current_path);

                        if ($current_path != $alias) {
                            $matched = $this->pathMatcher->matchPath($alias, $pathlist);
                        }
                    }

                    if ($filter_type == 'listexclude' && $matched) {
                        $state['add'] = FALSE;
                    }
                    if ($filter_type == 'listinclude' && !$matched) {
                        $state['add'] = FALSE;
                    }
                }

                $state['cache_contexts'][] = 'url.path';
            }
        }

        if ($state['add']) {
            $attachments['#cache']['tags'] = Cache::mergeTags($attachments['#cache']['tags'] ?? [], $config->getCacheTags());

            $settings = [
                'id' => $id,
            ];

            if ($config->get('loading.type') == 'async') {
                $settings['timeout_library'] = $config->get('loading.timeout.library');
                $settings['timeout_setting'] = $config->get('loading.timeout.settings');
                $settings['usejquery'] = ($config->get('loading.usejquery') == 'local') ? 'true' : 'false';
                $settings['testnull'] = NULL;

                $script = "window._vwo_code || (function () {
        var account_id={$settings['id']}, 
        version=2.1,
        settings_tolerance={$settings['timeout_setting']},
        hide_element='body',
        hide_element_style='opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important',
        /* DO NOT EDIT BELOW THIS LINE */
        f=false,w=window,d=document,v=d.querySelector('#vwoCode'),cK='_vwo_'+account_id+'_settings',cc={};try{var c=JSON.parse(localStorage.getItem('_vwo_'+account_id+'_config'));cc=c&&typeof c==='object'?c:{}}catch(e){}var stT=cc.stT==='session'?w.sessionStorage:w.localStorage;code={use_existing_jquery:function(){return typeof use_existing_jquery!=='undefined'?use_existing_jquery:undefined},library_tolerance:function(){return typeof library_tolerance!=='undefined'?library_tolerance:undefined},settings_tolerance:function(){return cc.sT||settings_tolerance},hide_element_style:function(){return'{'+(cc.hES||hide_element_style)+'}'},hide_element:function(){if(performance.getEntriesByName('first-contentful-paint')[0]){return''}return typeof cc.hE==='string'?cc.hE:hide_element},getVersion:function(){return version},finish:function(e){if(!f){f=true;var t=d.getElementById('_vis_opt_path_hides');if(t)t.parentNode.removeChild(t);if(e)(new Image).src='https://dev.visualwebsiteoptimizer.com/ee.gif?a='+account_id+e}},finished:function(){return f},addScript:function(e){var t=d.createElement('script');t.type='text/javascript';if(e.src){t.src=e.src}else{t.text=e.text}d.getElementsByTagName('head')[0].appendChild(t)},load:function(e,t){var i=this.getSettings(),n=d.createElement('script'),r=this;t=t||{};if(i){n.text=i;n.onload=function(){r.finish('&e=loading_success')};n.onerror=function(){r.finish('&e=loading_failure:script_error')};d.getElementsByTagName('head')[0].appendChild(n)}else if(typeof e==='string'&&e){var a=d.createElement('link');a.rel='stylesheet';a.href=e;a.type='text/css';a.media='all';d.getElementsByTagName('head')[0].appendChild(a)}else{n=e.cloneNode(true);n.onload=function(){r.finish('&e=loading_success')};n.onerror=function(){r.finish('&e=loading_failure:script_error')};d.getElementsByTagName('head')[0].appendChild(n)}},getSettings:function(){var e=null;try{e=stT.getItem(cK);if(e){var t=JSON.parse(e);if(typeof t==='object'&&t.s)return t.s}}catch(e){}return''},init:function(){if(w._vwo_code)try{var e=d.getElementById('_vis_opt_path_hides');e&&e.parentNode&&e.parentNode.removeChild(e)}catch(e){}var t=d.getElementsByTagName('head')[0],n=d.createElement('style'),i=hide_element(),r=this;if(i){n.setAttribute('id','_vis_opt_path_hides');n.setAttribute('type','text/css');n.setAttribute('style','width: 0px !important;height: 0px !important;position: absolute !important;visibility: hidden !important;top: -5000px !important;left: -5000px !important;');n.innerHTML='<iframe src=\"about:blank\" style=\"width:0;height:0;border:0;display:none;visibility:hidden;opacity:0;\"></iframe>';t.appendChild(n)}this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&f='+this.getVersion(),{dSC:cc.dSC,onloadCb:function(e,t){try{var i=JSON.parse(e.responseText);if(i.s){stT.setItem(cK,JSON.stringify({s:e.responseText,e:Date.now()+(cc.cTO||1000*60*60*24*365)}))}}catch(e){}},onerrorCb:function(){_vwo_code.finish('&e=loading_failure:'+t)}})},run:function(){this.init()}};code.run()})();";

                $attachments['#attached']['html_head'][] = [
                    [
                        '#tag' => 'script',
                        '#value' => $script,
                    ],
                    'vwo_script',
                ];
            } else {
                $attachments['#attached']['library'][] = 'vwo/vwo';
                $attachments['#attached']['drupalSettings']['vwo'] = $settings;
            }
        }

        $state['added'] = TRUE;
    }

    /**
     * Function to pass configuration settings for Drupal Debug.
     *
     * @param string $setting
     *   The setting key.
     * @param mixed $value
     *   The setting value.
     */
    public function setDebugConfig($setting, $value) {
        \Drupal::configFactory()->getEditable('vwo.settings')->set($setting, $value)->save();
    }

}
