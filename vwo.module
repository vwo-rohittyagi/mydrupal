<?php

/**
 * @file
 * VWO module main functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_page_attachments().
 */
function vwo_page_attachments(array &$attachments) {
  $state = &drupal_static('vwo_state', [
    'add' => FALSE,
    'added' => FALSE,
    'custom_url' => FALSE,
    'cache_contexts' => [],
  ]);

  // Do not attempt to add more than once.
  if ($state['added']) {
    return;
  }

  $config = \Drupal::config('vwo.settings');
  $id = $config->get('id');

  // If not configured, no point to continue.
  if ($id == NULL) {
    return;
  }

  // Do not proceed if not flagged to add, and filtering not enabled.
  $filter = ($config->get('filter.enabled') == 'on');
  if (!$filter && !$state['add']) {
    return;
  }

  // Check filter and add appropriate cache contexts.
  if ($filter) {

    // Assumption is that we add the code and negate with tests.
    $state['add'] = TRUE;

    // Need account for user and role checks.
    $account = \Drupal::currentUser();

    // Per user opt-out.
    $usercontrol = $config->get('filter.userconfig');
    if ($usercontrol != 'nocontrol' && $account->isAuthenticated()) {

      // Start with default.
      $addjs = ($usercontrol == 'optin') ? FALSE : TRUE;

      // Get user data and set if needed.
      $userconfig = \Drupal::service('user.data')
        ->get('vwo', $account->id(), 'userconfig');
      if (isset($userconfig)) {
        $addjs = $userconfig;
      }

      // Add the caching context and indicate choice.
      $state['add'] = $addjs;
      $state['cache_contexts'][] = 'user';
    }

    // Node type filtering.
    if ($state['add'] && $include_node_types = $config->get('filter.nodetypes')) {
      $node = \Drupal::routeMatch()->getParameter('node');

      if ($node) {
        $state['add'] = in_array($node->getType(), $include_node_types);
        $state['cache_contexts'][] = 'url.path';
      }

      else {
        // Condition requires that the page be a node based one.
        $state['add'] = FALSE;
      }
    }

    // Role filtering.
    if ($state['add'] && $include_roles = $config->get('filter.roles')) {
      $intersect = array_intersect($include_roles, $account->getRoles());

      $state['add'] = ($intersect) ? TRUE : FALSE;
      $state['cache_contexts'][] = 'user.roles';
    }

    // Path filtering.
    if ($state['add'] && $pathlist = $config->get('filter.page.list')) {
      $filter_type = $config->get('filter.page.type');

      // Eval the PHP code.
      if ($filter_type == 'usephp') {
        // Only actually run if the php module is also here.
        // See https://www.drupal.org/node/2088811
        if (\Drupal::moduleHandler()->moduleExists('php')) {
          if (php_eval($pathlist)) {
            $state['add'] = TRUE;
          }
          else {
            $state['add'] = FALSE;
          }
        }
      }

      // Check against the path and alias.
      else {

        $path_matcher = \Drupal::service('path.matcher');
        $current_path = \Drupal::service('path.current')->getPath();

        $matched = $path_matcher->matchPath($current_path, $pathlist);

        // If we haven't matched, also check agains the alias.
        if (!$matched) {
          // Get the alias.
          $alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

          // Only check again if there's a difference.
          if ($current_path != $alias) {
            $matched = $path_matcher->matchPath($alias, $pathlist);
          }
        }

        if ($filter_type == 'listexclude' && $matched) {
          $state['add'] = FALSE;
        }
        if ($filter_type == 'listinclude' && !$matched) {
          $state['add'] = FALSE;
        }
      }

      $state['cache_contexts'][] = 'url.path';
    }
  }

  // Add JS if we are going to.
  if ($state['add']) {
    $settings = [
      'id' => $id,
    ];

    if ($config->get('loading.type') == 'async') {
      $settings['timeout_library'] = $config->get('loading.timeout.library');
      $settings['timeout_setting'] = $config->get('loading.timeout.settings');
      $settings['usejquery'] = ($config->get('loading.usejquery') == 'local') ? 'true' : 'false';
      $settings['testnull'] = NULL;

      $script = "window._vwo_code || (function() {
      var account_id={$settings['id']},
      version=2.0,
      settings_tolerance={$settings['timeout_setting']},
      library_tolerance={$settings['timeout_library']},
      use_existing_jquery={$settings['usejquery']},
      hide_element='body',
      hide_element_style = 'opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important',
      /* DO NOT EDIT BELOW THIS LINE */
      f=false,w=window,d=document,v=d.querySelector('#vwoCode'),cK='_vwo_'+account_id+'_settings',cc={};try{var c=JSON.parse(localStorage.getItem('_vwo_'+account_id+'_config'));cc=c&&typeof c==='object'?c:{}}catch(e){}var stT=cc.stT==='session'?w.sessionStorage:w.localStorage;code={use_existing_jquery:function(){return typeof use_existing_jquery!=='undefined'?use_existing_jquery:undefined},library_tolerance:function(){return typeof library_tolerance!=='undefined'?library_tolerance:undefined},settings_tolerance:function(){return cc.sT||settings_tolerance},hide_element_style:function(){return'{'+(cc.hES||hide_element_style)+'}'},hide_element:function(){return typeof cc.hE==='string'?cc.hE:hide_element},getVersion:function(){return version},finish:function(){if(!f){f=true;var e=d.getElementById('_vis_opt_path_hides');if(e)e.parentNode.removeChild(e)}},finished:function(){return f},load:function(e){var t=this.getSettings(),n=d.createElement('script'),i=this;if(t){n.textContent=t;d.getElementsByTagName('head')[0].appendChild(n);if(!w.VWO||VWO.caE){stT.removeItem(cK);i.load(e)}}else{n.fetchPriority='high';n.src=e;n.type='text/javascript';n.onerror=function(){_vwo_code.finish()};d.getElementsByTagName('head')[0].appendChild(n)}},getSettings:function(){try{var e=stT.getItem(cK);if(!e){return}e=JSON.parse(e);if(Date.now()>e.e){stT.removeItem(cK);return}return e.s}catch(e){return}},init:function(){if(d.URL.indexOf('__vwo_disable__')>-1)return;var e=this.settings_tolerance();w._vwo_settings_timer=setTimeout(function(){_vwo_code.finish();stT.removeItem(cK)},e);var t=d.currentScript,n=d.createElement('style'),i=this.hide_element(),r=t&&!t.async&&i?i+this.hide_element_style():'',c=d.getElementsByTagName('head')[0];n.setAttribute('id','_vis_opt_path_hides');v&&n.setAttribute('nonce',v.nonce);n.setAttribute('type','text/css');if(n.styleSheet)n.styleSheet.cssText=r;else n.appendChild(d.createTextNode(r));c.appendChild(n);this.load('https://dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&vn='+version)}};w._vwo_code=code;code.init();})();";

      $attachments['#attached']['drupalSettings']['vwo'] = $settings;
      $attachments['#attached']['html_head'][] = [
          [
            '#tag' => 'script',
            '#attributes' => [
              "data-cfasync" => "false",
              "type" => "text/javascript",
              "id" => "vwoCode",
            ],
            '#value' => Markup::create($script),
          ], 'vwo',
      ];
    }
    else {
      // Synchronous adding of code is not implemented. Do not alter cache
      // contexts.
      $src = "https://dev.visualwebsiteoptimizer.com/lib/{$settings['id']}.js";
      $attachments['#attached']['drupalSettings']['vwo'] = $settings;
      $attachments['#attached']['html_head'][] = [
          [
            '#tag' => 'script',
            '#attributes' => [
              "data-cfasync" => "false",
              "type" => "text/javascript",
              "id" => "vwoCode",
              "src" => $src,
            ],
            '#value' => '',
          ], 'vwo',
      ];
      return;
    }
  }

  // Add the cache contexts if set.
  if ($state['cache_contexts']) {
    if (isset($attachments['#cache']['contexts'])) {
      $attachments['#cache']['contexts'] = array_merge(
        $attachments['#cache']['contexts'],
        $state['cache_contexts']
      );
    }
    else {
      $attachments['#cache']['contexts'] = $state['cache_contexts'];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vwo_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // This hook is called for more than just the user editing.
  if ($form_id == 'user_form') {

    $config = \Drupal::config('vwo.settings');
    $userfilter = $config->get('filter.userconfig');

    // If there is no user control, or the module is not working/enabled
    // then do not show the options.
    if ($userfilter == 'nocontrol'
        || $config->get('id') == NULL) {
      return;
    }

    // Default setting based on visibility setting.
    $vwo_checkbox = ($userfilter == 'optin') ? 0 : 1;

    // User settings stored in user.data.
    $account = $form_state->getFormObject()->getEntity();
    $userconfig = \Drupal::service('user.data')
      ->get('vwo', $account->id(), 'userconfig');
    if (isset($userconfig)) {
      $vwo_checkbox = $userconfig;
    }

    $form['vwo_user'] = [
      '#type' => 'details',
      '#open' => TRUE,
      '#title' => t('VWO'),
    ];

    $form['vwo_user']['vwo_userfilter'] = [
      '#type' => 'checkbox',
      '#title' => t('Include VWO A/B testing'),
      '#description' => t('This website may run A/B testing at times. If this box is checked, the javascript required for it to work will be included.'),
      '#default_value' => $vwo_checkbox,
    ];

    $form['actions']['submit']['#submit'][] = '_vwo_form_user_form_alter_submit';
  }
}

/**
 * Submit handler to save user choice on VWO code optin/out.
 */
function _vwo_form_user_form_alter_submit($form, FormStateInterface $form_state) {

  // Save data in the user data store.
  $account = $form_state->getFormObject()->getEntity();
  \Drupal::service('user.data')->set(
    'vwo',
    $account->id(),
    'userconfig',
    $form_state->getValue('vwo_userfilter')
  );
}

/**
 * Implements hook_help().
 */
function vwo_help($route_name, RouteMatchInterface $route_match) {

  if ($route_name == 'vwo.settings'|| $route_name == 'help.page.vwo') {
    \Drupal::moduleHandler()->loadInclude('vwo', 'inc', 'vwo.help');
    return _vwo_help_settings();
  }

  elseif ($route_name == 'vwo.settings.visibility') {
    \Drupal::moduleHandler()->loadInclude('vwo', 'inc', 'vwo.help');
    return _vwo_help_visibility();
  }

  elseif ($route_name == 'vwo.settings.vwoid') {
    \Drupal::moduleHandler()->loadInclude('vwo', 'inc', 'vwo.help');
    return _vwo_help_vwoid();
  }
}
